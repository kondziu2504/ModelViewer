//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""ModelViewer"",
            ""id"": ""c06ead07-0eaa-466f-995a-47ddaf6c63ba"",
            ""actions"": [
                {
                    ""name"": ""RotationDelta"",
                    ""type"": ""Value"",
                    ""id"": ""83462d2a-bc6a-4726-894f-6d0e83c0c522"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotationEnabled"",
                    ""type"": ""Value"",
                    ""id"": ""745538c1-f6ab-4aa9-b155-5b6f1bc3e3c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomDelta"",
                    ""type"": ""Value"",
                    ""id"": ""145b4d80-d0c2-430a-86df-ff2c40fcd19d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotationStart"",
                    ""type"": ""Button"",
                    ""id"": ""e9ca638f-2f2f-4bef-b44b-ee7821ce78d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""654a2b8a-165d-46bb-80a1-500bbf06d4fd"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""RotationDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39dae859-0340-446a-ad0e-dcc84a0ec6f8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationEnabled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a81b8d6d-9aa6-4d13-a8cf-ffe3353e496f"",
                    ""path"": ""<VirtualMouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""ZoomDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eba51462-6534-4a6f-9400-e7b13e70d57c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": []
        }
    ]
}");
        // ModelViewer
        m_ModelViewer = asset.FindActionMap("ModelViewer", throwIfNotFound: true);
        m_ModelViewer_RotationDelta = m_ModelViewer.FindAction("RotationDelta", throwIfNotFound: true);
        m_ModelViewer_RotationEnabled = m_ModelViewer.FindAction("RotationEnabled", throwIfNotFound: true);
        m_ModelViewer_ZoomDelta = m_ModelViewer.FindAction("ZoomDelta", throwIfNotFound: true);
        m_ModelViewer_RotationStart = m_ModelViewer.FindAction("RotationStart", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ModelViewer
    private readonly InputActionMap m_ModelViewer;
    private IModelViewerActions m_ModelViewerActionsCallbackInterface;
    private readonly InputAction m_ModelViewer_RotationDelta;
    private readonly InputAction m_ModelViewer_RotationEnabled;
    private readonly InputAction m_ModelViewer_ZoomDelta;
    private readonly InputAction m_ModelViewer_RotationStart;
    public struct ModelViewerActions
    {
        private @Controls m_Wrapper;
        public ModelViewerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotationDelta => m_Wrapper.m_ModelViewer_RotationDelta;
        public InputAction @RotationEnabled => m_Wrapper.m_ModelViewer_RotationEnabled;
        public InputAction @ZoomDelta => m_Wrapper.m_ModelViewer_ZoomDelta;
        public InputAction @RotationStart => m_Wrapper.m_ModelViewer_RotationStart;
        public InputActionMap Get() { return m_Wrapper.m_ModelViewer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ModelViewerActions set) { return set.Get(); }
        public void SetCallbacks(IModelViewerActions instance)
        {
            if (m_Wrapper.m_ModelViewerActionsCallbackInterface != null)
            {
                @RotationDelta.started -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnRotationDelta;
                @RotationDelta.performed -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnRotationDelta;
                @RotationDelta.canceled -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnRotationDelta;
                @RotationEnabled.started -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnRotationEnabled;
                @RotationEnabled.performed -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnRotationEnabled;
                @RotationEnabled.canceled -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnRotationEnabled;
                @ZoomDelta.started -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnZoomDelta;
                @ZoomDelta.performed -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnZoomDelta;
                @ZoomDelta.canceled -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnZoomDelta;
                @RotationStart.started -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnRotationStart;
                @RotationStart.performed -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnRotationStart;
                @RotationStart.canceled -= m_Wrapper.m_ModelViewerActionsCallbackInterface.OnRotationStart;
            }
            m_Wrapper.m_ModelViewerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotationDelta.started += instance.OnRotationDelta;
                @RotationDelta.performed += instance.OnRotationDelta;
                @RotationDelta.canceled += instance.OnRotationDelta;
                @RotationEnabled.started += instance.OnRotationEnabled;
                @RotationEnabled.performed += instance.OnRotationEnabled;
                @RotationEnabled.canceled += instance.OnRotationEnabled;
                @ZoomDelta.started += instance.OnZoomDelta;
                @ZoomDelta.performed += instance.OnZoomDelta;
                @ZoomDelta.canceled += instance.OnZoomDelta;
                @RotationStart.started += instance.OnRotationStart;
                @RotationStart.performed += instance.OnRotationStart;
                @RotationStart.canceled += instance.OnRotationStart;
            }
        }
    }
    public ModelViewerActions @ModelViewer => new ModelViewerActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface IModelViewerActions
    {
        void OnRotationDelta(InputAction.CallbackContext context);
        void OnRotationEnabled(InputAction.CallbackContext context);
        void OnZoomDelta(InputAction.CallbackContext context);
        void OnRotationStart(InputAction.CallbackContext context);
    }
}
